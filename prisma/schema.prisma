generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum InventoryType {
  IN
  OUT
}



enum Role {
  DONOR // Donor
  HOSPITAL //Hospital Entity
  ORGANIZATION // Single Admin
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String        @unique
  emailVerified DateTime?
  password      String
  role          Role          @default(DONOR)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  donor         Donor?        @relation
  hospital      Hospital?     @relation
  organization  Organization? @relation
}

model Donor {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String    @unique
  address    String
  bloodGroup String
  phone      String?
  Inventory  Inventory[] @relation("donor")
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @unique @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Hospital {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  address       String
  city          String
  state         String
  licenseNumber String    @unique
  website       String?
  phone         String
  Inventory     Inventory[] @relation("hospital")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inventory Inventory[] // One-to-many relationship 
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique @db.ObjectId
}

model Inventory {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  inventoryType  InventoryType
  bloodGroup     String
  quantity       Int           @default(0)
  email          String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String        @db.ObjectId

  transactionDate DateTime  @default(now())
  source          Donor?    @relation("donor", fields: [donorId], references: [id])
  donorId         String?   @db.ObjectId
  destination     Hospital? @relation("hospital", fields: [hospitalId], references: [id])
  hospitalId      String?   @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
