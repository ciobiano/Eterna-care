generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum InventoryType {
  IN
  OUT
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Role {
  DONOR // Donor
  HOSPITAL //Hospital Entity
  ORGANIZATION // Single Admin
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String        @unique
  emailVerified DateTime?
  password      String
  role          Role          @default(DONOR)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  donor         Donor?        @relation
  hospital      Hospital?     @relation
  organization  Organization? @relation
}

model Donor {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String
  bloodGroup String
  phone      String?
  Inventory  Inventory[]
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @unique @db.ObjectId
}

model Hospital {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String
  city          String
  state         String
  licenseNumber String
  website       String?
  phone         String
  Inventory     Inventory[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Organization {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  password String

  inventory Inventory[] // One-to-many relationship 
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique @db.ObjectId
}

model Inventory {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  inventoryType  InventoryType
  bloodGroup     BloodGroup
  quantity       Int           @default(0) // Ensure non-negative
  email          String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String        @db.ObjectId

  transactionDate DateTime  @default(now())
  source          Donor?    @relation(fields: [donorId], references: [id]) // Optional, if 'in' 
  donorId         String    @unique @db.ObjectId
  destination     Hospital? @relation(fields: [hospitalId], references: [id]) // Optional, if 'out'
  hospitalId      String    @unique @db.ObjectId
}
